{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/recipes';\nconst COMMENT_API_URL = '/api/recipe-comments';\nclass RecipeService {\n  // Create a new recipe\n  createRecipe(recipeData, userId) {\n    return axios.post(API_URL, recipeData, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Get all recipes\n  getAllRecipes() {\n    return axios.get(API_URL);\n  }\n\n  // Get recipe by id\n  getRecipeById(id) {\n    return axios.get(`${API_URL}/${id}`);\n  }\n\n  // Get recipes by user\n  getRecipesByUser(userId) {\n    return axios.get(`${API_URL}/user/${userId}`);\n  }\n\n  // Search recipes by query\n  searchRecipes(query) {\n    return axios.get(`${API_URL}/search?query=${query}`);\n  }\n\n  // Search recipes by ingredient\n  searchRecipesByIngredient(ingredient) {\n    return axios.get(`${API_URL}/search/ingredient?ingredient=${ingredient}`);\n  }\n\n  // Search recipes by dietary preferences\n  searchRecipesByDietaryPreferences(preferences) {\n    // Convert array to URL query params\n    const params = preferences.map(pref => `preferences=${pref}`).join('&');\n    return axios.get(`${API_URL}/search/dietary?${params}`);\n  }\n\n  // Get recipes by cuisine\n  getRecipesByCuisine(cuisineType) {\n    return axios.get(`${API_URL}/cuisine/${cuisineType}`);\n  }\n\n  // Update recipe\n  updateRecipe(id, recipeData, userId) {\n    return axios.put(`${API_URL}/${id}`, recipeData, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Delete recipe\n  deleteRecipe(id, userId) {\n    return axios.delete(`${API_URL}/${id}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Comment methods\n\n  // Create comment\n  createComment(commentData, userId) {\n    return axios.post(COMMENT_API_URL, commentData, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Get comments by recipe\n  getCommentsByRecipe(recipeId) {\n    return axios.get(`${COMMENT_API_URL}/recipe/${recipeId}`);\n  }\n\n  // Delete comment\n  deleteComment(commentId, userId) {\n    return axios.delete(`${COMMENT_API_URL}/${commentId}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n}\nexport default new RecipeService();","map":{"version":3,"names":["axios","API_URL","COMMENT_API_URL","RecipeService","createRecipe","recipeData","userId","post","headers","getAllRecipes","get","getRecipeById","id","getRecipesByUser","searchRecipes","query","searchRecipesByIngredient","ingredient","searchRecipesByDietaryPreferences","preferences","params","map","pref","join","getRecipesByCuisine","cuisineType","updateRecipe","put","deleteRecipe","delete","createComment","commentData","getCommentsByRecipe","recipeId","deleteComment","commentId"],"sources":["C:/Users/lasit/OneDrive/Documents/IDEs/VS Code/Paff-Yummly-App/frontend/src/services/RecipeService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api/recipes';\r\nconst COMMENT_API_URL = '/api/recipe-comments';\r\n\r\nclass RecipeService {\r\n    // Create a new recipe\r\n    createRecipe(recipeData, userId) {\r\n        return axios.post(API_URL, recipeData, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Get all recipes\r\n    getAllRecipes() {\r\n        return axios.get(API_URL);\r\n    }\r\n    \r\n    // Get recipe by id\r\n    getRecipeById(id) {\r\n        return axios.get(`${API_URL}/${id}`);\r\n    }\r\n    \r\n    // Get recipes by user\r\n    getRecipesByUser(userId) {\r\n        return axios.get(`${API_URL}/user/${userId}`);\r\n    }\r\n    \r\n    // Search recipes by query\r\n    searchRecipes(query) {\r\n        return axios.get(`${API_URL}/search?query=${query}`);\r\n    }\r\n    \r\n    // Search recipes by ingredient\r\n    searchRecipesByIngredient(ingredient) {\r\n        return axios.get(`${API_URL}/search/ingredient?ingredient=${ingredient}`);\r\n    }\r\n    \r\n    // Search recipes by dietary preferences\r\n    searchRecipesByDietaryPreferences(preferences) {\r\n        // Convert array to URL query params\r\n        const params = preferences.map(pref => `preferences=${pref}`).join('&');\r\n        return axios.get(`${API_URL}/search/dietary?${params}`);\r\n    }\r\n    \r\n    // Get recipes by cuisine\r\n    getRecipesByCuisine(cuisineType) {\r\n        return axios.get(`${API_URL}/cuisine/${cuisineType}`);\r\n    }\r\n    \r\n    // Update recipe\r\n    updateRecipe(id, recipeData, userId) {\r\n        return axios.put(`${API_URL}/${id}`, recipeData, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Delete recipe\r\n    deleteRecipe(id, userId) {\r\n        return axios.delete(`${API_URL}/${id}`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Comment methods\r\n    \r\n    // Create comment\r\n    createComment(commentData, userId) {\r\n        return axios.post(COMMENT_API_URL, commentData, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Get comments by recipe\r\n    getCommentsByRecipe(recipeId) {\r\n        return axios.get(`${COMMENT_API_URL}/recipe/${recipeId}`);\r\n    }\r\n    \r\n    // Delete comment\r\n    deleteComment(commentId, userId) {\r\n        return axios.delete(`${COMMENT_API_URL}/${commentId}`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n}\r\n\r\nexport default new RecipeService(); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,cAAc;AAC9B,MAAMC,eAAe,GAAG,sBAAsB;AAE9C,MAAMC,aAAa,CAAC;EAChB;EACAC,YAAYA,CAACC,UAAU,EAAEC,MAAM,EAAE;IAC7B,OAAON,KAAK,CAACO,IAAI,CAACN,OAAO,EAAEI,UAAU,EAAE;MACnCG,OAAO,EAAE;QAAE,QAAQ,EAAEF;MAAO;IAChC,CAAC,CAAC;EACN;;EAEA;EACAG,aAAaA,CAAA,EAAG;IACZ,OAAOT,KAAK,CAACU,GAAG,CAACT,OAAO,CAAC;EAC7B;;EAEA;EACAU,aAAaA,CAACC,EAAE,EAAE;IACd,OAAOZ,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,IAAIW,EAAE,EAAE,CAAC;EACxC;;EAEA;EACAC,gBAAgBA,CAACP,MAAM,EAAE;IACrB,OAAON,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,SAASK,MAAM,EAAE,CAAC;EACjD;;EAEA;EACAQ,aAAaA,CAACC,KAAK,EAAE;IACjB,OAAOf,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,iBAAiBc,KAAK,EAAE,CAAC;EACxD;;EAEA;EACAC,yBAAyBA,CAACC,UAAU,EAAE;IAClC,OAAOjB,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,iCAAiCgB,UAAU,EAAE,CAAC;EAC7E;;EAEA;EACAC,iCAAiCA,CAACC,WAAW,EAAE;IAC3C;IACA,MAAMC,MAAM,GAAGD,WAAW,CAACE,GAAG,CAACC,IAAI,IAAI,eAAeA,IAAI,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IACvE,OAAOvB,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,mBAAmBmB,MAAM,EAAE,CAAC;EAC3D;;EAEA;EACAI,mBAAmBA,CAACC,WAAW,EAAE;IAC7B,OAAOzB,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,YAAYwB,WAAW,EAAE,CAAC;EACzD;;EAEA;EACAC,YAAYA,CAACd,EAAE,EAAEP,UAAU,EAAEC,MAAM,EAAE;IACjC,OAAON,KAAK,CAAC2B,GAAG,CAAC,GAAG1B,OAAO,IAAIW,EAAE,EAAE,EAAEP,UAAU,EAAE;MAC7CG,OAAO,EAAE;QAAE,QAAQ,EAAEF;MAAO;IAChC,CAAC,CAAC;EACN;;EAEA;EACAsB,YAAYA,CAAChB,EAAE,EAAEN,MAAM,EAAE;IACrB,OAAON,KAAK,CAAC6B,MAAM,CAAC,GAAG5B,OAAO,IAAIW,EAAE,EAAE,EAAE;MACpCJ,OAAO,EAAE;QAAE,QAAQ,EAAEF;MAAO;IAChC,CAAC,CAAC;EACN;;EAEA;;EAEA;EACAwB,aAAaA,CAACC,WAAW,EAAEzB,MAAM,EAAE;IAC/B,OAAON,KAAK,CAACO,IAAI,CAACL,eAAe,EAAE6B,WAAW,EAAE;MAC5CvB,OAAO,EAAE;QAAE,QAAQ,EAAEF;MAAO;IAChC,CAAC,CAAC;EACN;;EAEA;EACA0B,mBAAmBA,CAACC,QAAQ,EAAE;IAC1B,OAAOjC,KAAK,CAACU,GAAG,CAAC,GAAGR,eAAe,WAAW+B,QAAQ,EAAE,CAAC;EAC7D;;EAEA;EACAC,aAAaA,CAACC,SAAS,EAAE7B,MAAM,EAAE;IAC7B,OAAON,KAAK,CAAC6B,MAAM,CAAC,GAAG3B,eAAe,IAAIiC,SAAS,EAAE,EAAE;MACnD3B,OAAO,EAAE;QAAE,QAAQ,EAAEF;MAAO;IAChC,CAAC,CAAC;EACN;AACJ;AAEA,eAAe,IAAIH,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}