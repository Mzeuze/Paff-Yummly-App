{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/groups';\nclass GroupService {\n  // Get all groups\n  getAllGroups() {\n    return axios.get(API_URL);\n  }\n\n  // Get group by ID\n  getGroupById(groupId) {\n    return axios.get(`${API_URL}/${groupId}`);\n  }\n\n  // Create new group\n  createGroup(groupData, userId) {\n    return axios.post(API_URL, groupData, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Update group\n  updateGroup(groupId, groupData, userId) {\n    return axios.put(`${API_URL}/${groupId}`, groupData, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Delete group\n  deleteGroup(groupId, userId) {\n    return axios.delete(`${API_URL}/${groupId}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Join group\n  joinGroup(groupId, userId) {\n    return axios.post(`${API_URL}/${groupId}/join`, {}, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Leave group\n  leaveGroup(groupId, userId) {\n    return axios.post(`${API_URL}/${groupId}/leave`, {}, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Get members\n  getGroupMembers(groupId) {\n    return axios.get(`${API_URL}/${groupId}/members`);\n  }\n\n  // Get moderators\n  getGroupModerators(groupId) {\n    return axios.get(`${API_URL}/${groupId}/moderators`);\n  }\n\n  // Add moderator\n  addModerator(groupId, userId, adminId) {\n    return axios.post(`${API_URL}/${groupId}/moderators/${userId}`, {}, {\n      headers: {\n        'userid': adminId\n      }\n    });\n  }\n\n  // Remove moderator\n  removeModerator(groupId, userId, adminId) {\n    return axios.delete(`${API_URL}/${groupId}/moderators/${userId}`, {\n      headers: {\n        'userid': adminId\n      }\n    });\n  }\n\n  // Transfer ownership\n  transferOwnership(groupId, newAdminId, currentAdminId) {\n    return axios.post(`${API_URL}/${groupId}/transfer-ownership`, {\n      newAdminId\n    }, {\n      headers: {\n        'userid': currentAdminId\n      }\n    });\n  }\n\n  // Search groups\n  searchGroups(query) {\n    return axios.get(`${API_URL}/search?query=${query}`);\n  }\n\n  // Get groups by member\n  getGroupsByMember(userId) {\n    return axios.get(`${API_URL}/member/${userId}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Get groups by admin\n  getGroupsByAdmin(userId) {\n    return axios.get(`${API_URL}/admin/${userId}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Check if user is member\n  isMember(groupId, userId) {\n    return axios.get(`${API_URL}/${groupId}/is-member`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Check if user is moderator\n  isModerator(groupId, userId) {\n    return axios.get(`${API_URL}/${groupId}/is-moderator`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Check if user is admin\n  isAdmin(groupId, userId) {\n    return axios.get(`${API_URL}/${groupId}/is-admin`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n}\nexport default new GroupService();","map":{"version":3,"names":["axios","API_URL","GroupService","getAllGroups","get","getGroupById","groupId","createGroup","groupData","userId","post","headers","updateGroup","put","deleteGroup","delete","joinGroup","leaveGroup","getGroupMembers","getGroupModerators","addModerator","adminId","removeModerator","transferOwnership","newAdminId","currentAdminId","searchGroups","query","getGroupsByMember","getGroupsByAdmin","isMember","isModerator","isAdmin"],"sources":["C:/Users/lasit/OneDrive/Documents/IDEs/VS Code/Paff-Yummly-App/frontend/src/services/GroupService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api/groups';\r\n\r\nclass GroupService {\r\n    // Get all groups\r\n    getAllGroups() {\r\n        return axios.get(API_URL);\r\n    }\r\n    \r\n    // Get group by ID\r\n    getGroupById(groupId) {\r\n        return axios.get(`${API_URL}/${groupId}`);\r\n    }\r\n    \r\n    // Create new group\r\n    createGroup(groupData, userId) {\r\n        return axios.post(API_URL, groupData, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Update group\r\n    updateGroup(groupId, groupData, userId) {\r\n        return axios.put(`${API_URL}/${groupId}`, groupData, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Delete group\r\n    deleteGroup(groupId, userId) {\r\n        return axios.delete(`${API_URL}/${groupId}`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Join group\r\n    joinGroup(groupId, userId) {\r\n        return axios.post(`${API_URL}/${groupId}/join`, {}, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Leave group\r\n    leaveGroup(groupId, userId) {\r\n        return axios.post(`${API_URL}/${groupId}/leave`, {}, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Get members\r\n    getGroupMembers(groupId) {\r\n        return axios.get(`${API_URL}/${groupId}/members`);\r\n    }\r\n    \r\n    // Get moderators\r\n    getGroupModerators(groupId) {\r\n        return axios.get(`${API_URL}/${groupId}/moderators`);\r\n    }\r\n    \r\n    // Add moderator\r\n    addModerator(groupId, userId, adminId) {\r\n        return axios.post(`${API_URL}/${groupId}/moderators/${userId}`, {}, {\r\n            headers: { 'userid': adminId }\r\n        });\r\n    }\r\n    \r\n    // Remove moderator\r\n    removeModerator(groupId, userId, adminId) {\r\n        return axios.delete(`${API_URL}/${groupId}/moderators/${userId}`, {\r\n            headers: { 'userid': adminId }\r\n        });\r\n    }\r\n    \r\n    // Transfer ownership\r\n    transferOwnership(groupId, newAdminId, currentAdminId) {\r\n        return axios.post(`${API_URL}/${groupId}/transfer-ownership`, \r\n            { newAdminId }, \r\n            { headers: { 'userid': currentAdminId } }\r\n        );\r\n    }\r\n    \r\n    // Search groups\r\n    searchGroups(query) {\r\n        return axios.get(`${API_URL}/search?query=${query}`);\r\n    }\r\n    \r\n    // Get groups by member\r\n    getGroupsByMember(userId) {\r\n        return axios.get(`${API_URL}/member/${userId}`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Get groups by admin\r\n    getGroupsByAdmin(userId) {\r\n        return axios.get(`${API_URL}/admin/${userId}`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Check if user is member\r\n    isMember(groupId, userId) {\r\n        return axios.get(`${API_URL}/${groupId}/is-member`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Check if user is moderator\r\n    isModerator(groupId, userId) {\r\n        return axios.get(`${API_URL}/${groupId}/is-moderator`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Check if user is admin\r\n    isAdmin(groupId, userId) {\r\n        return axios.get(`${API_URL}/${groupId}/is-admin`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n}\r\n\r\nexport default new GroupService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}