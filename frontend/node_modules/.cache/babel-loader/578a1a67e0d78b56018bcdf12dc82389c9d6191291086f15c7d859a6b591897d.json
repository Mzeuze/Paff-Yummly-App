{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/recipes';\nclass RecipeService {\n  // Get all recipes\n  getAllRecipes() {\n    return axios.get(API_URL);\n  }\n\n  // Get recipe by ID\n  getRecipeById(recipeId) {\n    return axios.get(`${API_URL}/${recipeId}`);\n  }\n\n  // Create new recipe\n  createRecipe(recipeData) {\n    return axios.post(API_URL, recipeData);\n  }\n\n  // Update recipe\n  updateRecipe(recipeId, recipeData, userId) {\n    return axios.put(`${API_URL}/${recipeId}`, recipeData, {\n      headers: {\n        'userId': userId\n      }\n    });\n  }\n\n  // Delete recipe\n  deleteRecipe(recipeId, userId) {\n    return axios.delete(`${API_URL}/${recipeId}`, {\n      headers: {\n        'userId': userId\n      }\n    });\n  }\n\n  // Get recipes by user\n  getRecipesByUser(userId) {\n    return axios.get(`${API_URL}/user/${userId}`);\n  }\n\n  // Search recipes\n  searchRecipes(params) {\n    return axios.get(`${API_URL}/search`, {\n      params\n    });\n  }\n\n  // Get recipes by cuisine\n  getRecipesByCuisine(cuisineType) {\n    return axios.get(`${API_URL}/cuisine/${cuisineType}`);\n  }\n\n  // Get recipes by dietary preference\n  getRecipesByDiet(preference) {\n    return axios.get(`${API_URL}/diet/${preference}`);\n  }\n\n  // Get recipes by ingredient\n  getRecipesByIngredient(ingredientName) {\n    return axios.get(`${API_URL}/ingredient/${ingredientName}`);\n  }\n\n  // Check if user is owner of recipe\n  isRecipeOwner(recipeId, userId) {\n    return axios.get(`${API_URL}/${recipeId}/owner`, {\n      headers: {\n        'userId': userId\n      }\n    });\n  }\n\n  // Comment operations\n  getRecipeComments(recipeId) {\n    return axios.get(`${API_URL}/${recipeId}/comments`);\n  }\n  addComment(recipeId, content, userId) {\n    return axios.post(`${API_URL}/${recipeId}/comments`, content, {\n      headers: {\n        'userId': userId,\n        'Content-Type': 'text/plain'\n      }\n    });\n  }\n  updateComment(recipeId, commentId, content, userId) {\n    return axios.put(`${API_URL}/${recipeId}/comments/${commentId}`, content, {\n      headers: {\n        'userId': userId,\n        'Content-Type': 'text/plain'\n      }\n    });\n  }\n  deleteComment(recipeId, commentId, userId) {\n    return axios.delete(`${API_URL}/${recipeId}/comments/${commentId}`, {\n      headers: {\n        'userId': userId\n      }\n    });\n  }\n}\nexport default new RecipeService();","map":{"version":3,"names":["axios","API_URL","RecipeService","getAllRecipes","get","getRecipeById","recipeId","createRecipe","recipeData","post","updateRecipe","userId","put","headers","deleteRecipe","delete","getRecipesByUser","searchRecipes","params","getRecipesByCuisine","cuisineType","getRecipesByDiet","preference","getRecipesByIngredient","ingredientName","isRecipeOwner","getRecipeComments","addComment","content","updateComment","commentId","deleteComment"],"sources":["C:/Users/lasit/OneDrive/Documents/IDEs/VS Code/Paff-Yummly-App/frontend/src/services/RecipeService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api/recipes';\r\n\r\nclass RecipeService {\r\n    // Get all recipes\r\n    getAllRecipes() {\r\n        return axios.get(API_URL);\r\n    }\r\n    \r\n    // Get recipe by ID\r\n    getRecipeById(recipeId) {\r\n        return axios.get(`${API_URL}/${recipeId}`);\r\n    }\r\n    \r\n    // Create new recipe\r\n    createRecipe(recipeData) {\r\n        return axios.post(API_URL, recipeData);\r\n    }\r\n    \r\n    // Update recipe\r\n    updateRecipe(recipeId, recipeData, userId) {\r\n        return axios.put(`${API_URL}/${recipeId}`, recipeData, {\r\n            headers: { 'userId': userId }\r\n        });\r\n    }\r\n    \r\n    // Delete recipe\r\n    deleteRecipe(recipeId, userId) {\r\n        return axios.delete(`${API_URL}/${recipeId}`, {\r\n            headers: { 'userId': userId }\r\n        });\r\n    }\r\n    \r\n    // Get recipes by user\r\n    getRecipesByUser(userId) {\r\n        return axios.get(`${API_URL}/user/${userId}`);\r\n    }\r\n    \r\n    // Search recipes\r\n    searchRecipes(params) {\r\n        return axios.get(`${API_URL}/search`, { params });\r\n    }\r\n    \r\n    // Get recipes by cuisine\r\n    getRecipesByCuisine(cuisineType) {\r\n        return axios.get(`${API_URL}/cuisine/${cuisineType}`);\r\n    }\r\n    \r\n    // Get recipes by dietary preference\r\n    getRecipesByDiet(preference) {\r\n        return axios.get(`${API_URL}/diet/${preference}`);\r\n    }\r\n    \r\n    // Get recipes by ingredient\r\n    getRecipesByIngredient(ingredientName) {\r\n        return axios.get(`${API_URL}/ingredient/${ingredientName}`);\r\n    }\r\n    \r\n    // Check if user is owner of recipe\r\n    isRecipeOwner(recipeId, userId) {\r\n        return axios.get(`${API_URL}/${recipeId}/owner`, {\r\n            headers: { 'userId': userId }\r\n        });\r\n    }\r\n    \r\n    // Comment operations\r\n    getRecipeComments(recipeId) {\r\n        return axios.get(`${API_URL}/${recipeId}/comments`);\r\n    }\r\n    \r\n    addComment(recipeId, content, userId) {\r\n        return axios.post(`${API_URL}/${recipeId}/comments`, content, {\r\n            headers: { \r\n                'userId': userId,\r\n                'Content-Type': 'text/plain'\r\n            }\r\n        });\r\n    }\r\n    \r\n    updateComment(recipeId, commentId, content, userId) {\r\n        return axios.put(`${API_URL}/${recipeId}/comments/${commentId}`, content, {\r\n            headers: { \r\n                'userId': userId,\r\n                'Content-Type': 'text/plain'\r\n            }\r\n        });\r\n    }\r\n    \r\n    deleteComment(recipeId, commentId, userId) {\r\n        return axios.delete(`${API_URL}/${recipeId}/comments/${commentId}`, {\r\n            headers: { 'userId': userId }\r\n        });\r\n    }\r\n}\r\n\r\nexport default new RecipeService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}