{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\nclass GroupService {\n  // Get all groups\n  getAllGroups() {\n    return axios.get(`${API_URL}/groups`);\n  }\n\n  // Get group by ID\n  getGroupById(groupId) {\n    return axios.get(`${API_URL}/groups/${groupId}`);\n  }\n\n  // Create new group\n  createGroup(groupData) {\n    return axios.post(`${API_URL}/groups`, groupData);\n  }\n\n  // Update group\n  updateGroup(groupId, groupData) {\n    return axios.put(`${API_URL}/groups/${groupId}`, groupData);\n  }\n\n  // Delete group\n  deleteGroup(groupId, userId) {\n    return axios.delete(`${API_URL}/groups/${groupId}?userId=${userId}`);\n  }\n\n  // Join group\n  joinGroup(groupId, userId) {\n    return axios.post(`${API_URL}/groups/${groupId}/members`, {\n      userId\n    });\n  }\n\n  // Leave group\n  leaveGroup(groupId, userId) {\n    return axios.delete(`${API_URL}/groups/${groupId}/members/${userId}`);\n  }\n\n  // Get members\n  getGroupMembers(groupId) {\n    return axios.get(`${API_URL}/groups/${groupId}/members`);\n  }\n\n  // Get moderators\n  getGroupModerators(groupId) {\n    return axios.get(`${API_URL}/groups/${groupId}/moderators`);\n  }\n\n  // Add moderator\n  addModerator(groupId, userId, requesterId) {\n    return axios.post(`${API_URL}/groups/${groupId}/moderators`, {\n      userId,\n      requesterId\n    });\n  }\n\n  // Remove moderator\n  removeModerator(groupId, userId, requesterId) {\n    return axios.delete(`${API_URL}/groups/${groupId}/moderators/${userId}?requesterId=${requesterId}`);\n  }\n\n  // Transfer ownership\n  transferOwnership(groupId, newAdminId, currentAdminId) {\n    return axios.post(`${API_URL}/groups/${groupId}/admin/transfer`, {\n      newAdminId,\n      currentAdminId\n    });\n  }\n\n  // Search groups\n  searchGroups(query) {\n    return axios.get(`${API_URL}/groups/search?query=${query}`);\n  }\n\n  // Get groups by member\n  getGroupsByMember(userId) {\n    return axios.get(`${API_URL}/groups/member/${userId}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Get groups by admin\n  getGroupsByAdmin(userId) {\n    return axios.get(`${API_URL}/groups/admin/${userId}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Check if user is member\n  isMember(groupId, userId) {\n    return axios.get(`${API_URL}/groups/${groupId}/members/${userId}/status`);\n  }\n\n  // Check if user is moderator\n  isModerator(groupId, userId) {\n    return axios.get(`${API_URL}/groups/${groupId}/moderators/${userId}/status`);\n  }\n\n  // Check if user is admin\n  isAdmin(groupId, userId) {\n    return axios.get(`${API_URL}/groups/${groupId}/admin/${userId}/status`);\n  }\n\n  // Group messaging operations\n  getGroupMessages(groupId, page = 0, size = 20) {\n    return axios.get(`${API_URL}/groups/${groupId}/messages?page=${page}&size=${size}`);\n  }\n  sendMessage(groupId, message) {\n    return axios.post(`${API_URL}/groups/${groupId}/messages`, message);\n  }\n  deleteMessage(groupId, messageId, userId) {\n    return axios.delete(`${API_URL}/groups/${groupId}/messages/${messageId}?userId=${userId}`);\n  }\n\n  // Group member management\n  removeMember(groupId, userId, requesterId) {\n    return axios.delete(`${API_URL}/groups/${groupId}/members/${userId}?requesterId=${requesterId}`);\n  }\n\n  // Discussion operations\n  getGroupDiscussions(groupId, page = 0, size = 10) {\n    return axios.get(`${API_URL}/groups/${groupId}/discussions?page=${page}&size=${size}`);\n  }\n  getDiscussionById(groupId, discussionId) {\n    return axios.get(`${API_URL}/groups/${groupId}/discussions/${discussionId}`);\n  }\n  createDiscussion(groupId, discussionData) {\n    return axios.post(`${API_URL}/groups/${groupId}/discussions`, discussionData);\n  }\n  updateDiscussion(groupId, discussionId, discussionData) {\n    return axios.put(`${API_URL}/groups/${groupId}/discussions/${discussionId}`, discussionData);\n  }\n  deleteDiscussion(groupId, discussionId, userId) {\n    return axios.delete(`${API_URL}/groups/${groupId}/discussions/${discussionId}?userId=${userId}`);\n  }\n}\nexport default new GroupService();","map":{"version":3,"names":["axios","API_URL","GroupService","getAllGroups","get","getGroupById","groupId","createGroup","groupData","post","updateGroup","put","deleteGroup","userId","delete","joinGroup","leaveGroup","getGroupMembers","getGroupModerators","addModerator","requesterId","removeModerator","transferOwnership","newAdminId","currentAdminId","searchGroups","query","getGroupsByMember","headers","getGroupsByAdmin","isMember","isModerator","isAdmin","getGroupMessages","page","size","sendMessage","message","deleteMessage","messageId","removeMember","getGroupDiscussions","getDiscussionById","discussionId","createDiscussion","discussionData","updateDiscussion","deleteDiscussion"],"sources":["C:/Users/lasit/OneDrive/Documents/IDEs/VS Code/Paff-Yummly-App/frontend/src/services/GroupService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\nclass GroupService {\r\n    // Get all groups\r\n    getAllGroups() {\r\n        return axios.get(`${API_URL}/groups`);\r\n    }\r\n    \r\n    // Get group by ID\r\n    getGroupById(groupId) {\r\n        return axios.get(`${API_URL}/groups/${groupId}`);\r\n    }\r\n    \r\n    // Create new group\r\n    createGroup(groupData) {\r\n        return axios.post(`${API_URL}/groups`, groupData);\r\n    }\r\n    \r\n    // Update group\r\n    updateGroup(groupId, groupData) {\r\n        return axios.put(`${API_URL}/groups/${groupId}`, groupData);\r\n    }\r\n    \r\n    // Delete group\r\n    deleteGroup(groupId, userId) {\r\n        return axios.delete(`${API_URL}/groups/${groupId}?userId=${userId}`);\r\n    }\r\n    \r\n    // Join group\r\n    joinGroup(groupId, userId) {\r\n        return axios.post(`${API_URL}/groups/${groupId}/members`, { userId });\r\n    }\r\n    \r\n    // Leave group\r\n    leaveGroup(groupId, userId) {\r\n        return axios.delete(`${API_URL}/groups/${groupId}/members/${userId}`);\r\n    }\r\n    \r\n    // Get members\r\n    getGroupMembers(groupId) {\r\n        return axios.get(`${API_URL}/groups/${groupId}/members`);\r\n    }\r\n    \r\n    // Get moderators\r\n    getGroupModerators(groupId) {\r\n        return axios.get(`${API_URL}/groups/${groupId}/moderators`);\r\n    }\r\n    \r\n    // Add moderator\r\n    addModerator(groupId, userId, requesterId) {\r\n        return axios.post(`${API_URL}/groups/${groupId}/moderators`, { \r\n            userId, \r\n            requesterId \r\n        });\r\n    }\r\n    \r\n    // Remove moderator\r\n    removeModerator(groupId, userId, requesterId) {\r\n        return axios.delete(\r\n            `${API_URL}/groups/${groupId}/moderators/${userId}?requesterId=${requesterId}`\r\n        );\r\n    }\r\n    \r\n    // Transfer ownership\r\n    transferOwnership(groupId, newAdminId, currentAdminId) {\r\n        return axios.post(`${API_URL}/groups/${groupId}/admin/transfer`, {\r\n            newAdminId,\r\n            currentAdminId\r\n        });\r\n    }\r\n    \r\n    // Search groups\r\n    searchGroups(query) {\r\n        return axios.get(`${API_URL}/groups/search?query=${query}`);\r\n    }\r\n    \r\n    // Get groups by member\r\n    getGroupsByMember(userId) {\r\n        return axios.get(`${API_URL}/groups/member/${userId}`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Get groups by admin\r\n    getGroupsByAdmin(userId) {\r\n        return axios.get(`${API_URL}/groups/admin/${userId}`, {\r\n            headers: { 'userid': userId }\r\n        });\r\n    }\r\n    \r\n    // Check if user is member\r\n    isMember(groupId, userId) {\r\n        return axios.get(`${API_URL}/groups/${groupId}/members/${userId}/status`);\r\n    }\r\n    \r\n    // Check if user is moderator\r\n    isModerator(groupId, userId) {\r\n        return axios.get(`${API_URL}/groups/${groupId}/moderators/${userId}/status`);\r\n    }\r\n    \r\n    // Check if user is admin\r\n    isAdmin(groupId, userId) {\r\n        return axios.get(`${API_URL}/groups/${groupId}/admin/${userId}/status`);\r\n    }\r\n    \r\n    // Group messaging operations\r\n    getGroupMessages(groupId, page = 0, size = 20) {\r\n        return axios.get(`${API_URL}/groups/${groupId}/messages?page=${page}&size=${size}`);\r\n    }\r\n    \r\n    sendMessage(groupId, message) {\r\n        return axios.post(`${API_URL}/groups/${groupId}/messages`, message);\r\n    }\r\n    \r\n    deleteMessage(groupId, messageId, userId) {\r\n        return axios.delete(`${API_URL}/groups/${groupId}/messages/${messageId}?userId=${userId}`);\r\n    }\r\n    \r\n    // Group member management\r\n    removeMember(groupId, userId, requesterId) {\r\n        return axios.delete(\r\n            `${API_URL}/groups/${groupId}/members/${userId}?requesterId=${requesterId}`\r\n        );\r\n    }\r\n    \r\n    // Discussion operations\r\n    getGroupDiscussions(groupId, page = 0, size = 10) {\r\n        return axios.get(`${API_URL}/groups/${groupId}/discussions?page=${page}&size=${size}`);\r\n    }\r\n    \r\n    getDiscussionById(groupId, discussionId) {\r\n        return axios.get(`${API_URL}/groups/${groupId}/discussions/${discussionId}`);\r\n    }\r\n    \r\n    createDiscussion(groupId, discussionData) {\r\n        return axios.post(`${API_URL}/groups/${groupId}/discussions`, discussionData);\r\n    }\r\n    \r\n    updateDiscussion(groupId, discussionId, discussionData) {\r\n        return axios.put(`${API_URL}/groups/${groupId}/discussions/${discussionId}`, discussionData);\r\n    }\r\n    \r\n    deleteDiscussion(groupId, discussionId, userId) {\r\n        return axios.delete(`${API_URL}/groups/${groupId}/discussions/${discussionId}?userId=${userId}`);\r\n    }\r\n}\r\n\r\nexport default new GroupService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}