{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/groups';\nclass GroupService {\n  // Get all groups\n  getAllGroups() {\n    return axios.get(API_URL);\n  }\n\n  // Get group by ID\n  getGroupById(groupId) {\n    return axios.get(`${API_URL}/${groupId}`);\n  }\n\n  // Create new group\n  createGroup(groupData, userId) {\n    // After creating the group, automatically join the user to the group\n    return axios.post(API_URL, groupData, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Update group\n  updateGroup(groupId, groupData, userId) {\n    return axios.put(`${API_URL}/${groupId}`, groupData, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Delete group\n  deleteGroup(groupId, userId) {\n    // Try a POST request with a delete_action parameter instead of DELETE\n    return axios.post(`${API_URL}/${groupId}/delete`, {\n      userId: userId\n    }, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Join group\n  joinGroup(groupId, userId) {\n    return axios.post(`${API_URL}/${groupId}/join`, {}, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Leave group\n  leaveGroup(groupId, userId) {\n    return axios.post(`${API_URL}/${groupId}/leave`, {}, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Get members\n  getGroupMembers(groupId) {\n    return axios.get(`${API_URL}/${groupId}/members`);\n  }\n\n  // Get moderators\n  getGroupModerators(groupId) {\n    return axios.get(`${API_URL}/${groupId}/moderators`);\n  }\n\n  // Add moderator\n  addModerator(groupId, userId, adminId) {\n    return axios.post(`${API_URL}/${groupId}/moderators/${userId}`, {}, {\n      headers: {\n        'userid': adminId\n      }\n    });\n  }\n\n  // Remove moderator\n  removeModerator(groupId, userId, adminId) {\n    return axios.delete(`${API_URL}/${groupId}/moderators/${userId}`, {\n      headers: {\n        'userid': adminId\n      }\n    });\n  }\n\n  // Transfer ownership\n  transferOwnership(groupId, newAdminId, currentAdminId) {\n    return axios.post(`${API_URL}/${groupId}/transfer-ownership`, {\n      newAdminId\n    }, {\n      headers: {\n        'userid': currentAdminId\n      }\n    });\n  }\n\n  // Search groups\n  searchGroups(query) {\n    return axios.get(`${API_URL}/search?query=${query}`);\n  }\n\n  // Get groups by member\n  getGroupsByMember(userId) {\n    return axios.get(`${API_URL}/member/${userId}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Get groups by admin\n  getGroupsByAdmin(userId) {\n    return axios.get(`${API_URL}/admin/${userId}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Check if user is member\n  isMember(groupId, userId) {\n    return axios.get(`${API_URL}/${groupId}/is-member`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Check if user is moderator\n  isModerator(groupId, userId) {\n    return axios.get(`${API_URL}/${groupId}/is-moderator`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Check if user is admin\n  isAdmin(groupId, userId) {\n    return axios.get(`${API_URL}/${groupId}/is-admin`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Get messages for a group\n  getGroupMessages(groupId, userId) {\n    return axios.get(`${API_URL}/${groupId}/messages`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Create a new message\n  createMessage(groupId, content, userId) {\n    return axios.post(`${API_URL}/${groupId}/messages`, {\n      content\n    }, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Delete a message\n  deleteMessage(groupId, messageId, userId) {\n    return axios.delete(`${API_URL}/${groupId}/messages/${messageId}`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n\n  // Remove a member (for moderators and admin)\n  removeMember(groupId, userId, requesterId) {\n    return axios.delete(`${API_URL}/${groupId}/members/${userId}`, {\n      headers: {\n        'userid': requesterId\n      }\n    });\n  }\n\n  // Alias for getGroupsByMember used in AllGroups\n  getUserGroups(userId) {\n    return this.getGroupsByMember(userId);\n  }\n\n  // Alias for createMessage used in GroupMessages\n  postGroupMessage(groupId, userId, content) {\n    return this.createMessage(groupId, content, userId);\n  }\n\n  // Alias for deleteMessage used in GroupMessages\n  deleteGroupMessage(messageId) {\n    var _document$querySelect;\n    // Find the group ID from the URL or context\n    // For now, extract from the current URL\n    const pathParts = window.location.pathname.split('/');\n    const groupId = pathParts[pathParts.indexOf('groups') + 1];\n    const userId = ((_document$querySelect = document.querySelector('meta[name=\"userId\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.content) || localStorage.getItem('userId');\n    return this.deleteMessage(groupId, messageId, userId);\n  }\n\n  // Get user role in group (member, moderator, admin) all in one call\n  getUserRoleInGroup(groupId, userId) {\n    return axios.get(`${API_URL}/${groupId}/user-role`, {\n      headers: {\n        'userid': userId\n      }\n    });\n  }\n}\nexport default new GroupService();","map":{"version":3,"names":["axios","API_URL","GroupService","getAllGroups","get","getGroupById","groupId","createGroup","groupData","userId","post","headers","updateGroup","put","deleteGroup","joinGroup","leaveGroup","getGroupMembers","getGroupModerators","addModerator","adminId","removeModerator","delete","transferOwnership","newAdminId","currentAdminId","searchGroups","query","getGroupsByMember","getGroupsByAdmin","isMember","isModerator","isAdmin","getGroupMessages","createMessage","content","deleteMessage","messageId","removeMember","requesterId","getUserGroups","postGroupMessage","deleteGroupMessage","_document$querySelect","pathParts","window","location","pathname","split","indexOf","document","querySelector","localStorage","getItem","getUserRoleInGroup"],"sources":["C:/Users/lasit/OneDrive/Documents/IDEs/VS Code/Paff-Yummly-App/frontend/src/services/GroupService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api/groups';\n\nclass GroupService {\n    // Get all groups\n    getAllGroups() {\n        return axios.get(API_URL);\n    }\n    \n    // Get group by ID\n    getGroupById(groupId) {\n        return axios.get(`${API_URL}/${groupId}`);\n    }\n    \n    // Create new group\n    createGroup(groupData, userId) {\n        // After creating the group, automatically join the user to the group\n        return axios.post(API_URL, groupData, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Update group\n    updateGroup(groupId, groupData, userId) {\n        return axios.put(`${API_URL}/${groupId}`, groupData, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Delete group\n    deleteGroup(groupId, userId) {\n        // Try a POST request with a delete_action parameter instead of DELETE\n        return axios.post(`${API_URL}/${groupId}/delete`, \n            { userId: userId }, \n            { headers: { 'userid': userId } }\n        );\n    }\n    \n    // Join group\n    joinGroup(groupId, userId) {\n        return axios.post(`${API_URL}/${groupId}/join`, {}, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Leave group\n    leaveGroup(groupId, userId) {\n        return axios.post(`${API_URL}/${groupId}/leave`, {}, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Get members\n    getGroupMembers(groupId) {\n        return axios.get(`${API_URL}/${groupId}/members`);\n    }\n    \n    // Get moderators\n    getGroupModerators(groupId) {\n        return axios.get(`${API_URL}/${groupId}/moderators`);\n    }\n    \n    // Add moderator\n    addModerator(groupId, userId, adminId) {\n        return axios.post(`${API_URL}/${groupId}/moderators/${userId}`, {}, {\n            headers: { 'userid': adminId }\n        });\n    }\n    \n    // Remove moderator\n    removeModerator(groupId, userId, adminId) {\n        return axios.delete(`${API_URL}/${groupId}/moderators/${userId}`, {\n            headers: { 'userid': adminId }\n        });\n    }\n    \n    // Transfer ownership\n    transferOwnership(groupId, newAdminId, currentAdminId) {\n        return axios.post(`${API_URL}/${groupId}/transfer-ownership`, \n            { newAdminId }, \n            { headers: { 'userid': currentAdminId } }\n        );\n    }\n    \n    // Search groups\n    searchGroups(query) {\n        return axios.get(`${API_URL}/search?query=${query}`);\n    }\n    \n    // Get groups by member\n    getGroupsByMember(userId) {\n        return axios.get(`${API_URL}/member/${userId}`, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Get groups by admin\n    getGroupsByAdmin(userId) {\n        return axios.get(`${API_URL}/admin/${userId}`, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Check if user is member\n    isMember(groupId, userId) {\n        return axios.get(`${API_URL}/${groupId}/is-member`, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Check if user is moderator\n    isModerator(groupId, userId) {\n        return axios.get(`${API_URL}/${groupId}/is-moderator`, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Check if user is admin\n    isAdmin(groupId, userId) {\n        return axios.get(`${API_URL}/${groupId}/is-admin`, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Get messages for a group\n    getGroupMessages(groupId, userId) {\n        return axios.get(`${API_URL}/${groupId}/messages`, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Create a new message\n    createMessage(groupId, content, userId) {\n        return axios.post(`${API_URL}/${groupId}/messages`, \n            { content }, \n            { headers: { 'userid': userId } }\n        );\n    }\n    \n    // Delete a message\n    deleteMessage(groupId, messageId, userId) {\n        return axios.delete(`${API_URL}/${groupId}/messages/${messageId}`, {\n            headers: { 'userid': userId }\n        });\n    }\n    \n    // Remove a member (for moderators and admin)\n    removeMember(groupId, userId, requesterId) {\n        return axios.delete(`${API_URL}/${groupId}/members/${userId}`, {\n            headers: { 'userid': requesterId }\n        });\n    }\n\n    // Alias for getGroupsByMember used in AllGroups\n    getUserGroups(userId) {\n        return this.getGroupsByMember(userId);\n    }\n\n    // Alias for createMessage used in GroupMessages\n    postGroupMessage(groupId, userId, content) {\n        return this.createMessage(groupId, content, userId);\n    }\n\n    // Alias for deleteMessage used in GroupMessages\n    deleteGroupMessage(messageId) {\n        // Find the group ID from the URL or context\n        // For now, extract from the current URL\n        const pathParts = window.location.pathname.split('/');\n        const groupId = pathParts[pathParts.indexOf('groups') + 1];\n        const userId = document.querySelector('meta[name=\"userId\"]')?.content || localStorage.getItem('userId');\n        \n        return this.deleteMessage(groupId, messageId, userId);\n    }\n\n    // Get user role in group (member, moderator, admin) all in one call\n    getUserRoleInGroup(groupId, userId) {\n        return axios.get(`${API_URL}/${groupId}/user-role`, {\n            headers: { 'userid': userId }\n        });\n    }\n}\n\nexport default new GroupService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}